import React, { useState, useEffect } from 'react';
import { 
  ArrowLeft, 
  Calendar, 
  Bed, 
  Upload, 
  FileText, 
  Edit,
  Check,
  Download,
  Trash2
} from 'lucide-react';
import { Patient, Document, DischargeSummary } from '../../types';
import { useAuth } from '../../contexts/AuthContext';
import { supabase } from '../../lib/supabase';
import { format } from 'date-fns';

interface PatientDetailsProps {
  patient: Patient;
  onBack: () => void;
}

const PatientDetails: React.FC<PatientDetailsProps> = ({ patient, onBack }) => {
  const { user } = useAuth();
  const [documents, setDocuments] = useState<Document[]>([]);
  const [summary, setSummary] = useState<DischargeSummary | null>(null);
  const [loading, setLoading] = useState(true);
  const [generateLoading, setGenerateLoading] = useState(false);
  const [editingSummary, setEditingSummary] = useState(false);
  const [summaryContent, setSummaryContent] = useState('');

  useEffect(() => {
    fetchPatientData();
  }, [patient.id]);

  const fetchPatientData = async () => {
    try {
      setLoading(true);
      
      // Fetch documents
      const { data: docsData } = await supabase
        .from('documents')
        .select('*')
        .eq('patient_id', patient.id);

      // Fetch summary
      const { data: summaryData } = await supabase
        .from('discharge_summaries')
        .select('*')
        .eq('patient_id', patient.id)
        .order('version_number', { ascending: false })
        .limit(1)
        .single();

      setDocuments(docsData || []);
      setSummary(summaryData || null);
      setSummaryContent(summaryData?.content || '');
    } catch (error) {
      console.error('Error fetching patient data:', error);
    } finally {
      setLoading(false);
    }
  };

  const generateSummary = async () => {
    setGenerateLoading(true);
    try {
      // Simulate AI generation
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      const mockSummary = `
DISCHARGE SUMMARY

Patient: ${patient.full_name}
Date of Birth: ${format(new Date(patient.date_of_birth), 'MMM dd, yyyy')}
Admission Date: ${format(new Date(patient.date_of_admission), 'MMM dd, yyyy')}
Room: ${patient.room_number}, Bed: ${patient.bed_number}

CHIEF COMPLAINT:
Patient presented with symptoms requiring medical attention and monitoring.

HOSPITAL COURSE:
The patient received comprehensive medical care during their stay. Regular monitoring and appropriate interventions were provided. The patient showed steady improvement throughout the hospitalization period.

DISCHARGE CONDITION:
Patient is stable and ready for discharge home with appropriate follow-up care.

MEDICATIONS ON DISCHARGE:
To be completed by attending physician.

FOLLOW-UP INSTRUCTIONS:
- Follow up with primary care physician in 1-2 weeks
- Return to emergency department if symptoms worsen
- Complete rest and gradual return to normal activities

DISCHARGE STATUS: Stable

Generated by: ${user?.first_name} ${user?.last_name}
Date: ${format(new Date(), 'MMM dd, yyyy HH:mm')}
      `.trim();

      const { data, error } = await supabase
        .from('discharge_summaries')
        .insert([{
          patient_id: patient.id,
          content: mockSummary,
          status: 'REVIEW_PENDING',
          generated_by: user?.id,
          version_number: (summary?.version_number || 0) + 1,
        }])
        .select()
        .single();

      if (error) throw error;
      
      setSummary(data);
      setSummaryContent(data.content);
      
      // Update patient status
      await supabase
        .from('patients')
        .update({ status: 'REVIEW_PENDING' })
        .eq('id', patient.id);

    } catch (error) {
      console.error('Error generating summary:', error);
    } finally {
      setGenerateLoading(false);
    }
  };

  const saveSummary = async () => {
    if (!summary) return;

    try {
      const { error } = await supabase
        .from('discharge_summaries')
        .update({ content: summaryContent })
        .eq('id', summary.id);

      if (error) throw error;
      
      setSummary({ ...summary, content: summaryContent });
      setEditingSummary(false);
    } catch (error) {
      console.error('Error saving summary:', error);
    }
  };

  const approveSummary = async () => {
    if (!summary || user?.role !== 'DOCTOR') return;

    try {
      const { error } = await supabase
        .from('discharge_summaries')
        .update({ 
          status: 'APPROVED',
          approved_by: user.id,
          approved_at: new Date().toISOString(),
        })
        .eq('id', summary.id);

      if (error) throw error;
      
      // Update patient status to discharged
      await supabase
        .from('patients')
        .update({ status: 'DISCHARGED' })
        .eq('id', patient.id);

      setSummary({ 
        ...summary, 
        status: 'APPROVED',
        approved_by: user.id,
        approved_at: new Date().toISOString(),
      });
    } catch (error) {
      console.error('Error approving summary:', error);
    }
  };

  const handleFileUpload = async (file: File) => {
    try {
      // Simulate file upload
      const mockDocument = {
        patient_id: patient.id,
        file_name: file.name,
        file_path: `https://example.com/documents/${file.name}`,
        file_type: file.type,
        uploaded_by: user?.id,
        file_size: file.size,
      };

      const { data, error } = await supabase
        .from('documents')
        .insert([mockDocument])
        .select()
        .single();

      if (error) throw error;
      setDocuments([...documents, data]);
    } catch (error) {
      console.error('Error uploading document:', error);
    }
  };

  if (loading) {
    return (
      <div className="p-8">
        <div className="animate-pulse space-y-6">
          <div className="h-8 bg-gray-200 rounded w-1/3"></div>
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <div className="h-64 bg-gray-200 rounded-xl"></div>
            <div className="h-64 bg-gray-200 rounded-xl"></div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="p-8">
      <div className="flex items-center space-x-4 mb-8">
        <button
          onClick={onBack}
          className="p-2 text-gray-400 hover:text-gray-600 transition-colors duration-200"
        >
          <ArrowLeft className="w-6 h-6" />
        </button>
        <div>
          <h1 className="text-3xl font-bold text-gray-900">{patient.full_name}</h1>
          <p className="text-gray-600 mt-1">Patient Details & Documents</p>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* Patient Information */}
        <div className="space-y-6">
          <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Patient Information</h3>
            <div className="space-y-4">
              <div className="flex items-center space-x-3">
                <Calendar className="w-5 h-5 text-gray-400" />
                <div>
                  <span className="text-sm text-gray-600">Date of Birth:</span>
                  <p className="font-medium">{format(new Date(patient.date_of_birth), 'MMM dd, yyyy')}</p>
                </div>
              </div>
              
              <div className="flex items-center space-x-3">
                <Calendar className="w-5 h-5 text-gray-400" />
                <div>
                  <span className="text-sm text-gray-600">Admission Date:</span>
                  <p className="font-medium">{format(new Date(patient.date_of_admission), 'MMM dd, yyyy')}</p>
                </div>
              </div>
              
              <div className="flex items-center space-x-3">
                <Bed className="w-5 h-5 text-gray-400" />
                <div>
                  <span className="text-sm text-gray-600">Location:</span>
                  <p className="font-medium">Room {patient.room_number}, Bed {patient.bed_number}</p>
                </div>
              </div>
            </div>
          </div>

          {/* Documents Section */}
          <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-gray-900">Documents</h3>
              <label className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium transition-colors duration-200 cursor-pointer flex items-center space-x-2">
                <Upload className="w-4 h-4" />
                <span>Upload</span>
                <input
                  type="file"
                  className="hidden"
                  accept=".pdf,.jpg,.jpeg,.png,.doc,.docx"
                  onChange={(e) => {
                    const file = e.target.files?.[0];
                    if (file) handleFileUpload(file);
                  }}
                />
              </label>
            </div>
            
            {documents.length === 0 ? (
              <div className="text-center py-8">
                <FileText className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                <p className="text-gray-600">No documents uploaded yet</p>
              </div>
            ) : (
              <div className="space-y-3">
                {documents.map((doc) => (
                  <div key={doc.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                    <div className="flex items-center space-x-3">
                      <FileText className="w-5 h-5 text-blue-600" />
                      <div>
                        <p className="font-medium text-gray-900">{doc.file_name}</p>
                        <p className="text-sm text-gray-600">
                          {format(new Date(doc.upload_date), 'MMM dd, yyyy')}
                        </p>
                      </div>
                    </div>
                    <div className="flex items-center space-x-2">
                      <button className="p-2 text-gray-400 hover:text-blue-600 transition-colors duration-200">
                        <Download className="w-4 h-4" />
                      </button>
                      <button className="p-2 text-gray-400 hover:text-red-600 transition-colors duration-200">
                        <Trash2 className="w-4 h-4" />
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>

        {/* Discharge Summary Section */}
        <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
          <div className="flex items-center justify-between mb-6">
            <h3 className="text-lg font-semibold text-gray-900">Discharge Summary</h3>
            {!summary && documents.length > 0 && (
              <button
                onClick={generateSummary}
                disabled={generateLoading}
                className={`px-4 py-2 rounded-lg font-medium transition-all duration-200 flex items-center space-x-2 ${
                  generateLoading
                    ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
                    : 'bg-green-600 hover:bg-green-700 text-white shadow-lg hover:shadow-xl'
                }`}
              >
                <FileText className="w-4 h-4" />
                <span>{generateLoading ? 'Generating...' : 'Generate Summary'}</span>
              </button>
            )}
          </div>

          {generateLoading && (
            <div className="text-center py-12">
              <div className="animate-spin w-8 h-8 border-4 border-blue-600 border-t-transparent rounded-full mx-auto mb-4"></div>
              <p className="text-gray-600">AI is analyzing documents and generating summary...</p>
            </div>
          )}

          {!summary && !generateLoading && (
            <div className="text-center py-12">
              <FileText className="w-12 h-12 text-gray-400 mx-auto mb-4" />
              <p className="text-gray-600 mb-4">No discharge summary generated yet</p>
              {documents.length === 0 && (
                <p className="text-sm text-gray-500">Upload documents first to generate summary</p>
              )}
            </div>
          )}

          {summary && (
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-4">
                  <span className={`px-3 py-1 rounded-full text-sm font-medium ${
                    summary.status === 'APPROVED' ? 'bg-green-100 text-green-800' :
                    summary.status === 'REVIEW_PENDING' ? 'bg-yellow-100 text-yellow-800' :
                    'bg-gray-100 text-gray-800'
                  }`}>
                    {summary.status.replace('_', ' ')}
                  </span>
                  <span className="text-sm text-gray-600">
                    v{summary.version_number}
                  </span>
                </div>
                
                <div className="flex items-center space-x-2">
                  {summary.status !== 'APPROVED' && (
                    <button
                      onClick={() => setEditingSummary(!editingSummary)}
                      className="p-2 text-gray-400 hover:text-blue-600 transition-colors duration-200"
                    >
                      <Edit className="w-4 h-4" />
                    </button>
                  )}
                  
                  {summary.status === 'REVIEW_PENDING' && user?.role === 'DOCTOR' && (
                    <button
                      onClick={approveSummary}
                      className="px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg font-medium transition-colors duration-200 flex items-center space-x-2"
                    >
                      <Check className="w-4 h-4" />
                      <span>Approve</span>
                    </button>
                  )}
                </div>
              </div>

              {editingSummary ? (
                <div className="space-y-4">
                  <textarea
                    value={summaryContent}
                    onChange={(e) => setSummaryContent(e.target.value)}
                    className="w-full h-96 p-4 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 font-mono text-sm"
                  />
                  <div className="flex space-x-3">
                    <button
                      onClick={saveSummary}
                      className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium transition-colors duration-200"
                    >
                      Save Changes
                    </button>
                    <button
                      onClick={() => {
                        setEditingSummary(false);
                        setSummaryContent(summary.content);
                      }}
                      className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors duration-200"
                    >
                      Cancel
                    </button>
                  </div>
                </div>
              ) : (
                <div className="bg-gray-50 rounded-lg p-4">
                  <pre className="text-sm text-gray-800 whitespace-pre-wrap font-mono leading-relaxed">
                    {summary.content}
                  </pre>
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default PatientDetails;